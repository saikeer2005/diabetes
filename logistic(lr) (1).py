# -*- coding: utf-8 -*-
"""logistic(LR).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qyER_NkqGmuN_beFRTyEa42IN3teM_ue
"""

import pandas as pd
import streamlit as st
from sklearn.linear_model import LogisticRegression
import pickle

# Streamlit app title
st.title("Model Deployment: Logistic Regression")
st.sidebar.header("User Input Parameters")

# Function to collect user inputs
def user_input_features():
    Pregnancies = st.sidebar.number_input("Number of Pregnancies", min_value=0, max_value=20, step=1)
    Glucose = st.sidebar.number_input("Glucose Level", min_value=0, max_value=200, step=1)
    BloodPressure = st.sidebar.number_input("Blood Pressure", min_value=0, max_value=122, step=1)
    SkinThickness = st.sidebar.number_input("Skin Thickness", min_value=0, max_value=99, step=1)
    Insulin = st.sidebar.number_input("Insulin Level", min_value=0, max_value=900, step=1)
    BMI = st.sidebar.number_input("BMI", min_value=0.0, max_value=70.0, step=0.1)
    DiabetesPedigreeFunction = st.sidebar.number_input("Diabetes Pedigree Function", min_value=0.0, max_value=2.5, step=0.01)
    Age = st.sidebar.number_input("Insert the Age", min_value=0, max_value=120, step=1)

    data = {
        "Pregnancies": Pregnancies,
        "Glucose": Glucose,
        "BloodPressure": BloodPressure,
        "SkinThickness": SkinThickness,
        "Insulin": Insulin,
        "BMI": BMI,
        "DiabetesPedigreeFunction": DiabetesPedigreeFunction,
        "Age": Age
    }
    return pd.DataFrame(data, index=[0])

# Get user inputs
df = user_input_features()

# Display user inputs
st.subheader("User Input Parameters")
st.write(df)

# Load pre-trained model
try:
    with open("model.pkl", "rb") as file:
        clf = pickle.load(file)

    # Ensure the loaded object is a scikit-learn model
    if not hasattr(clf, "predict"):
        st.error("Loaded object is not a valid scikit-learn model.")
        st.stop()
except FileNotFoundError:
    st.error("Model file not found! Please ensure 'model.pkl' is in the same directory.")
    st.stop()

# Predict using the loaded model
prediction = clf.predict(df)
prediction_proba = clf.predict_proba(df)

# Display results
st.subheader("Predicted Result")
st.write("Yes" if prediction[0] == 1 else "No")

st.subheader("Prediction Probability")
st.write(f"Probability of Yes (Diabetes): {prediction_proba[0][1]:.2f}")
st.write(f"Probability of No (Non-Diabetes): {prediction_proba[0][0]:.2f}")











